openapi: 3.0.0
info:
  title: Vectara API v2
  description: |
    The Vectara Generative AI platform.
  version: 2.0.0
  termsOfService: https://vectara.com/legal/terms-of-service/
  contact:
    email: feedback@vectara.com
servers:
  - url: https://api.vectara.com/v2
paths:
  /v2/query:
    post:
      tags:
        - query
      summary: Conduct Retrieval Augmented Generation (RAG) on corpora
      description: Use this endpoint to perform a multi-purpose query that can retrieve relevant information from one or more corpora and generate a response using RAG.
      operationId: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      x-stream-based-on-body: "streamResponse()"
      responses:
        '200':
          description: A response to a query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/QueryStreamedResponse'
        '400':
          description: Query request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow querying one or more corpora in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: One or more of the corpora was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/corpora:
    post:
      summary: Create a corpus
      description: Create a corpus, which is a container to store documents and associated metadata.
      operationId: createCorpus
      tags:
        - corpora
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCorpusRequest'
      responses:
        '201':
          description: The corpus has been created.
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/Corpus'
        '400':
          description: Invalid request body in the create corpus request.
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List corpora
      description: "List corpora in the account. The corpus objects that are returned are less \
                    detailed than the direct corpus retrieval operation." 
      operationId: listCorpora
      tags:
        - corpora
      parameters:
        - name: limit
          in: query
          description: The maximum number of corpora to return at one time.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: filter
          in: query
          description: A regular expression to filter the corpora by their name or summary.
          required: false
          schema:
            type: string
        - name: page_key
          in: query
          description: Used to retrieve the next page of corpora after the limit has been reached. 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of corpora.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCorporaResponse'
        '403':
          description: Permissions do not allow listing corpora.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/corpora/{corpus_key}:
    get:
      tags:
        - corpora
      summary: Retrieve metadata about a corpus
      description: Get metadata about a corpus. This operation is not a method of searching a corpus.
      operationId: getCorpus
      parameters:
        - in: path
          name: corpus_key
          description: The unique key identifying the corpus to retrieve.
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
      responses:
        '200':
          description: A corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Corpus'
        '403':
          description: Permissions do not allow retrieving the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      tags:
        - corpora
      summary: Delete a corpus and all its data
      description: Delete a corpus and all the data that it contains.
      operationId: deleteCorpus
      parameters:
        - in: path
          name: corpus_key
          description: The unique key identifying the corpus to delete
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
      responses:
        '204':
          description: Successfully deleted a corpus.
        '403':
          description: Permissions do not allow deleting the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    patch:
      tags:
        - corpora
      summary: Update a corpus
      description: Enable or disable a corpus.
      operationId: updateCorpus
      parameters:
        - in: path
          name: corpus_key
          description: The unique key identifying the corpus to update.
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCorpusRequest'
      responses:
        '200':
          description: Succcessfully modified the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Corpus'
        '403':
          description: Permissions do not allow updating the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/corpora/{corpus_key}/reset:
    post:
      tags:
        - corpora
      summary: Remove all documents and data in a corpus
      description: Resets a corpus, which removs all documents and data from the specified corpus, while keeping the corpus itself.
      operationId: resetCorpus
      parameters:
        - in: path
          name: corpus_key
          description: The unique key identifying the corpus to reset.
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
      responses:
        '204':
          description: Succesfully reset a corpus.
        '403':
          description: Permissions do not allow reseting the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/corpora/{corpus_key}/replace_filter_attributes:
    post:
      tags:
        - corpora
      summary: Replace the filter attributes of a corpus.
      description: |
        Replace the filter attributes of a corpus. This does not happen immediately, but
        instead creates a job and will complete when that job completes. Until that
        job completes, using new filter attributes will not work.

        You can monitor the status of the filter change using the returned job id.
      operationId: replaceFilterAttributes
      parameters:
        - in: path
          name: corpus_key
          description: Key of the corpus to have filters replaced.
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceFilterAttributesRequest'
      responses:
        '200':
          description: Succesfully created a job that will replace the filter attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceFilterAttributesResponse'
        '403':
          description: Permissions don't allow replacing filter attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/corpora/{corpus_key}/query:
    get:
      tags:
        - query
      summary: Simplified query method for querying a single corpus
      description: Search a single corpus with a simple query request.
      operationId: searchCorpus
      parameters:
        - in: path
          name: corpus_key
          description: The unique key identifying the corpus to query.
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
        - in: query
          name: q
          description: The search query string for the corpus.
          required: true
          schema:
            type: string
        - in: query
          name: limit
          description: Maximum number of results to return.
          required: true
          schema:
            type: integer
            default: 10
            minimum: 1
        - in: query
          name: offset
          description: Position from which to start in the result set.
          required: true
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: A response to a query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFullResponse'
        '400':
          description: Query request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow querying the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    post:
      tags:
        - query
      summary: Query a specific corpus
      description: Query a specific corpus and find relevant results, highlight relevant snippets, and use Retrival Augmented Generation.
      operationId: queryCorpus
      parameters:
        - in: path
          name: corpus_key
          description: The unique key identifying the corpus to query.
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryCorpusRequest'
      x-stream-based-on-body: "streamResponse()"
      responses:
        '200':
          description: A response to a query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/QueryStreamedResponse'
        '400':
          description: Query request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow querying the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/corpora/{corpus_key}/upload_file:
    post:
      tags:
        - upload
      summary: Upload a file to the corpus
      description: Upload files such as PDFs and Word Documents. Vectara will attempt to automatically extract text and any metadata.
      operationId: uploadFile
      parameters:
        - in: path
          name: corpus_key
          description: The unique key identifying the corpus of which to upload the file.
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
      requestBody:
        description: |
          Upload a file for the Vectara platform to attempt to parse and turn into a document within the corpus.
          The first part of the multipart request can contain any document metadata to attach to the parsed
          document. Only one document may be uploaded at a time.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadFileRequest'
            encoding:
              metadata:
                contentType: application/json
              file:
                contentType: application/octet-stream
      responses:
        '201':
          description: The extracted document havs been parsed and added to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Upload files request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow uploading a file to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/corpora/{corpus_key}/documents:
    post:
      tags:
        - index
      summary: Add a document to a corpus
      description: |
        Add a document to a corpus. You can add documents that are either in a typical structured format,
        or in a format that explicitly specifies each document part that becomes a search result.
      operationId: createCorpusDocument
      parameters:
        - in: path
          name: corpus_key
          description: The unique key identifying the queried corpus.
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        '201':
          description: Document added to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Document creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a file in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    get:
      tags:
        - documents
      summary: List the documents in the corpus
      operationId: listCorpusDocuments
      parameters:
        - in: path
          name: corpus_key
          description: The unique key identifying the queried corpus.
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
        - name: limit
          in: query
          description: The maximum number of documents to return at one time.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: page_key
          in: query
          description: Used to the retrieve the next page of documents after the limit has been reached. 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of documents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDocumentsResponse'
        '403':
          description: Permissions do not allow listing documents in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/corpora/{corpus_key}/documents/{document_id}:
    delete:
      tags:
        - documents
      summary: Delete a document
      operationId: deleteCorpusDocument
      parameters:
        - in: path
          name: corpus_key
          description: The unique key identifying the corpus with the document to delete.
          required: true
          schema:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
        - in: path
          name: document_id
          description: The Document ID of the document to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted the document.
        '403':
          description: Permissions do not allow deleting a document in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/chats:
    post:
      tags:
        - chats
      summary: Start a chat
      description: Create a chat while specifying the default retrieval parameters used by the prompt.
      operationId: createChat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      x-stream-based-on-body: "streamResponse()"
      responses:
        '200':
          description: A response to a chat request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatStreamedResponse'
        '400':
          description: Chat creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a chat in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    get:
      tags:
        - chats
      summary: List chats
      description: Retrieve a list of previous chats in the Vectara account.
      operationId: listChats
      parameters:
        - in: query
          name: limit
          description: The maximum number of results to return in the list.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: page_key
          description: Used to the retrieve the next page of chats after the limit has been reached. 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of chats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChatsResponse'
        '403':
          description: Permissions do not allow listing chats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/summarizers:
    get:
      tags:
        - summarizers
      summary: List summarizers
      description: List of availables summarizers that can be used with queries.
      operationId: listSummarizers
      parameters:
        - name: filter
          in: query
          description: A regular expression to match names and descriptions of the summarizers.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to return in the list.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: page_key
          in: query
          description: |
            Used to the retrieve the next page of summarizers after the limit has been reached.
            This parameter is not needed for the first page of results.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of summarizers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSummarizersResponse'
        '403':
          description: Permissions do not allow listing summarizers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/chats/{chat_id}:
    get:
      tags:
        - chats
      summary: Get a chat
      description: Get a chat summary to view what started the chat, but not subsequent turns.
      operationId: getChat
      parameters:
        - in: path
          name: chat_id
          description: The ID of the chat.
          required: true
          schema:
            type: string
            pattern: 'cht_.+$'
      responses:
        '200':
          description: A chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '403':
          description: Permissions do not allow retrieving the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      tags:
        - chats
      summary: Delete a chat
      description: Delete a chat and any turns it contains permanently.
      operationId: deleteChat
      parameters:
        - in: path
          name: chat_id
          description: The ID of the chat.
          required: true
          schema:
            type: string
            pattern: 'cht_.+$'
      responses:
        '204':
          description: Successfully deleted the chat.
        '403':
          description: Permissions do not allow deleting the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/chats/{chat_id}/turns:
    post:
      tags:
        - chats
      summary: Create a new turn in the chat
      description: Create a new turn in the chat. Each conversation has a series of `turn` objects, which are the sequence of message and response pairs tha make up the dialog.
      operationId: createChatTurn
      parameters:
        - in: path
          name: chat_id
          description: The ID of the chat.
          required: true
          schema:
            type: string
            pattern: 'cht_.+$'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      x-stream-based-on-body: "streamResponse()"
      responses:
        '200':
          description: A response to a chat request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatStreamedResponse'
        '400':
          description: Turn creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a turn in the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    get:
      tags:
        - chats
      summary: List turns in a chat
      description: List all turns in a chat to see all message and response pairs that make up the dialog.
      operationId: listChatTurns
      parameters:
        - in: path
          name: chat_id
          description: The ID of the chat.
          required: true
          schema:
            type: string
            pattern: 'cht_.+$'
      responses:
        '200':
          description: List of turns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChatTurnsResponse'
        '403':
          description: Permissions do not allow listing turns in the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/chats/{chat_id}/turns/{turn_id}:
    get:
      tags:
        - chats
      summary: Get a turn
      description: Get a specific turn from a chat, which is a message and response pair from the conversation.
      operationId: getChatTurn
      parameters:
        - in: path
          name: chat_id
          description: The ID of the chat.
          required: true
          schema:
            type: string
            pattern: 'cht_.+$'
        - in: path
          name: turn_id
          description: The ID of the turn.
          required: true
          schema:
            type: string
            pattern: 'trn_.+$'
      responses:
        '200':
          description: The turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '403':
          description: Permissions do not allow getting the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus, chat, or turn not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      tags:
        - chats
      summary: Delete a turn
      description: Delete a turn from a chat. This will delete all subsequent turns in the chat.
      operationId: deleteChatTurn
      parameters:
        - in: path
          name: chat_id
          description: The ID of the chat.
          required: true
          schema:
            type: string
            pattern: 'cht_.+$'
        - in: path
          name: turn_id
          description: The ID of the turn.
          required: true
          schema:
            type: string
            pattern: 'trn_.+$'
      responses:
        '204':
          description: Successfully deleted a turn.
        '403':
          description: Permissions do not allow deleting the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus, chat, or turn not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    patch:
      tags:
        - chats
      summary: Update a turn
      description: Update a turn; used to disable or enable a chat.
      operationId: updateChatTurn
      parameters:
        - in: path
          name: chat_id
          description: The ID of the chat.
          required: true
          schema:
            type: string
            pattern: 'cht_.+$'
        - in: path
          name: turn_id
          description: The ID of the turn.
          required: true
          schema:
            type: string
            pattern: 'trn_.+$'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTurnRequest'
      responses:
        '200':
          description: Succcessfully modified the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '403':
          description: Permissions do not allow updating the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus, chat, or turn not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/encoders:
    get:
      tags:
        - encoders
      summary: List the available encoders
      description: Encoders are used to store and retrieve from a corpus. 
      operationId: listEncoders
      parameters:
        - in: query
          name: filter
          description: A regular expression against encoder names and descriptions.
          required: false
          schema:
            type: string
            example: "vectara.*"
        - in: query
          name: limit
          description: The maximum number of results to return in the list.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: page_key
          in: query
          description: Used to the retrieve the next page of encoders after the limit has been reached. 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of encoders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEncodersResponse'
        '403':
          description: Permissions do not allow listing encoders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/jobs:
    get:
      tags:
        - jobs
      summary: List jobs
      description: List jobs for the account. Jobs are background processes like replacing the filterable metadata attributes.
      operationId: listJobs
      parameters:
        - name: corpus_key
          in: query
          description: The unique key identifying the corpus with the job.
          required: false
          schema:
            type: array
            items:
              type: string
              pattern: '[a-zA-Z0-9_\=]+$'
        - name: after
          in: query
          description: Get jobs after a date time.
          required: false
          schema:
            type: string
            format: date-time
        - name: state
          in: query
          description: Indicates the states the jobs can be in.
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/JobState'
        - name: limit
          in: query
          description: The maximum number of documents to return at one time.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: page_key
          in: query
          description: Used to the retrieve the next page of documents after the limit has been reached. 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobsResponse'
        '403':
          description: Permissions do not allow listing jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/jobs/{job_id}:
    get:
      tags:
        - jobs
      summary: Get a job by ID
      description: Get a job by a specific ID. Jobs are backgrouond processes like replacing the filterable metadata attributes.
      operationId: getJob
      parameters:
        - name: job_id
          in: path
          description: The ID of job to get.
          required: true
          schema:
            type: string
            pattern: 'job_.+$'
      responses:
        '200':
          description: A job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '403':
          description: Permissions do not allow retrieving a job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/users:
    post:
      tags:
        - users
      summary: Create a user in the current customer account
      description: Create a user for the current customer account.
      operationId: createUser
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: The created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow retrieving a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - users
      summary: List users in the account
      description: Lists all users in the account.
      operationId: listUsers
      parameters:
        - name: limit
          in: query
          description: The maximum number of users to return at one time.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: page_key
          in: query
          description: Used to the retrieve the next page of users after the limit has been reached. 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '403':
          description: Permissions do not allow listing users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/users/{user_id}:
    get:
      tags:
        - users
      summary: Get a user
      description: Get a user and view details like the email, username, and roles associated with a user.
      operationId: getUser
      parameters:
        - name: user_id
          in: path
          description: Specifies the User ID that to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Permissions do not allow retrieving the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    patch:
      tags:
        - users
      summary: Update a user
      description: Update details about a user such as role names.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: Specifies the User ID to update.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: New user after modification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Permissions do not allow updating the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      tags:
        - users
      summary: Delete a user
      description: Delete a user from the account.
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: Specifies the User ID to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User was successfully deleted.
        '403':
          description: Permissions do not allow deleting the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/users/{user_id}/reset_password:
    patch:
      tags:
        - users
      summary: Reset the password for a user
      description: Reset the password for a user.
      operationId: resetUserPassword
      parameters:
        - name: user_id
          in: path
          description: Specifies the User ID to update.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User was sent the password reset email.
        '403':
          description: Permissions do not allow resting the user password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /v2/api_keys:
    post:
      tags:
        - auth
      summary: Create an API key
      description: An API key is to authenticate when calling Vectara APIs.
      operationId: createApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: An API Key object, used to query the Vectara API with the assigned roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: API key creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating the API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - auth
      summary: List API keys
      operationId: listApiKeys
      parameters:
        - name: limit
          in: query
          description: Max number of API keys to return at one time.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: page_key
          in: query
          description: Used to the retrieve the next page of API keys after the limit has been reached. 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of API keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeysResponse'
        '400':
          description: API key list request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow listing API keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/api_keys/{api_key_id}:
    get:
      tags:
        - auth
      summary: Get an API key
      operationId: getApiKey
      parameters:
        - name: api_key_id
          in: path
          description: The name of the API key.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '403':
          description: Permissions do not allow getting this API keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - auth
      summary: Update an API key
      description: Update an API key such as the roles attached to the key.
      operationId: updateApiKey
      parameters:
        - name: api_key_id
          in: path
          description: The name of the API key.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKeyRequest'
      responses:
        '200':
          description: The API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '403':
          description: Permissions do not allow getting this API keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - auth
      summary: Delete an API key
      description: Delete API keys to help you manage the security and lifecycle of API keys in your application.
      operationId: deleteApiKey
      parameters:
        - name: api_key_id
          in: path
          description: The name of the API key.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The API key was deleted.
        '403':
          description: Permissions do not allow deleting this API keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/app_clients:
    post:
      tags:
        - auth
      summary: Create an App Client
      description: An App Client is used for OAuth 2.0 authentication when calling Vectara APIs.
      operationId: createAppClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppClientRequest'
      responses:
        '201':
          description: An App Client object, used to query the Vectara API with the assigned roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppClient'
        '400':
          description: App Client creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating the App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - auth
      summary: List App Clients
      operationId: listAppClient
      parameters:
        - name: limit
          in: query
          description: The maximum number of App Clients to return at one time.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: page_key
          in: query
          description: Used to retrieve the next page of App Clients after the limit has been reached. 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of App Clients.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAppClientsResponse'
        '400':
          description: API key list request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow listing API keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/api_keys/{app_client_id}:
    get:
      tags:
        - auth
      summary: Get an App Client
      operationId: getAppClient
      parameters:
        - name: app_client_id
          in: path
          description: The name of the App Client.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppClient'
        '403':
          description: Permissions do not allow getting this App Clients.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - auth
      summary: Update an App Client
      operationId: updateAppClient
      parameters:
        - name: app_client_id
          in: path
          description: The name of App Client.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKeyRequest'
      responses:
        '200':
          description: The App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '403':
          description: Permissions do not allow getting this App Clients.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - auth
      summary: Delete an App Client
      operationId: deleteAppCLient
      parameters:
        - name: app_client_id
          in: path
          description: The name of App Client.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The App Client was deleted.
        '403':
          description: Permissions do not allow deleting this App Clients.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/api_roles:
    get:
      tags:
        - auth
      summary: Get available API roles
      description: Get available API roles. API roles can be attached to identities, like an API key.
      operationId: listApiRoles
      parameters:
        - name: limit
          in: query
          description: The maximum number of documents to return at one time.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: page_key
          in: query
          description: Used to retrieve the next page of documents after the limit has been reached. 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of API roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiRolesResponse'
        '403':
          description: Permissions do not allow listing API roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    CreateCorpusRequest:
      type: object
      properties:
        key:
          description: The user-provided key for the corpus.
          type: string
          pattern: '[a-zA-Z0-9_\=]+$'
          example: my-corpus
        name:
          description: The name for the corpus. This value defaults to the key.
          type: string
          example: My corpus
        description:
          description: Description for the corpus.
          type: string
          example: Documents with important information for my prompt.
        queries_are_answers:
          description: Queries made to this corpus are considered answers, and not questions.
          type: boolean
          default: false
        documents_are_questions:
          description: Documents inside this corpus are considered questions, and not answers.
          type: boolean
          default: false
        encoder_id:
          description: The encoder used by the corpus. This value defaults to the most recent Vectara encoder.
          type: string
          pattern: 'enc_[0-9]+$'
          example: enc_1
        filter_attributes:
          description: |
            The new filter attributes of the corpus. 
            If unset then the corpus will not have filter attributes.
          type: array
          default: []
          items:
            $ref: '#/components/schemas/FilterAttribute'
        custom_dimensions:
          description: Custom dimensions of all document parts inside the corpus.
          type: array
          default: []
          items:
            $ref: '#/components/schemas/CorpusCustomDimension'
      required:
        - key
    UpdateCorpusRequest:
      type: object
      description: Corpus properties that are modifiable after creation.
      properties:
        enabled:
          description: Set whether or not the corpus is enabled. If unset then the corpus will remain in the same state.
          type: boolean
          example: false
        filter_attributes:
          description: The new filter attributes. If unset then corpus filter attributes will remain the same.
          type: array
          items:
            $ref: '#/components/schemas/FilterAttribute'
    ReplaceFilterAttributesRequest:
      type: object
      properties:
        filter_attributes:
          description: The new filter attributes.
          type: array
          items:
            $ref: '#/components/schemas/FilterAttribute'
      required:
        - filter_attributes
    ReplaceFilterAttributesResponse:
      type: object
      properties:
        job_id:
          description: Job that was created in order to replace filter attributes.
          type: string
          pattern: 'job_.+$'
      required:
        - job_id
    Corpus:
      type: object
      properties:
        id:
          description: Vectara ID of the corpus.
          type: string
          pattern: 'crp_[0-9]+$'
        key:
          description: The user-provided key for the corpus.
          type: string
          pattern: '[a-zA-Z0-9_\=]+$'
        name:
          description: Name for the corpus. This value defaults to the key.
          type: string
        description:
          description: Corpus description.
          type: string
        enabled:
          description: Specifies whether the corpus is enabled or not.
          type: boolean
        chat_history_corpus:
          description: Indicates that this corpus does not store documents amd stores chats instead.
          type: boolean
        queries_are_answers:
          description: |
            Queries made to this corpus are considered answers, and not questions.
            This swaps the semantics of the encoder used at query time.
          type: boolean
          default: false
        documents_are_questions:
          description: |
            Documents inside this corpus are considered questions, and not answers.
            This swaps the semantics of the encoder used at indexing.
          type: boolean
          default: false
        encoder_id:
          description: The encoder used by the corpus.
          type: string
          pattern: 'enc_[0-9]+$'
        filter_attributes:
          description: The new filter attributes of the corpus.
          type: array
          items:
            $ref: '#/components/schemas/FilterAttribute'
        custom_dimensions:
          description: The custom dimensions of all document parts inside the corpus.
          type: array
          items:
            $ref: '#/components/schemas/CorpusCustomDimension'
        limits:
          type: object
          properties:
            used_bytes:
              description: The number of bytes contained in the corpus.
              type: integer
              format: int64
            max_bytes:
              description: The maximum number of bytes the corpus can be.
              type: integer
              format: int64
            max_metadata_bytes:
              description: The maximum size that metadata can be on documents.
              type: integer
              format: int64
            index_rate:
              description: The maximum per-second addition of new documents to corpus.
              type: integer
              format: int64
        created_at:
          description: Indicates when the corpus was created.
          type: string
          format: date-time
    CorpusCustomDimension:
      type: object
      description: |
        Custom dimensions attached to all document parts in a corpus. Allows a document part
        to have a default value for the custom dimension if not specified when indexed.
      properties:
        name:
          description: The name of the custom dimension.
          type: string
          example: importance
        indexing_default:
          description: |
            Default value of the custom dimension if a document part is indexed without
            this custom dimension specified.

            A value of 0 means that custom dimension is not considered.
          type: number
          format: double
          example: 0 
          default: 0
        querying_default:
          description: |
            Default value of the custom dimension if a document part is queried without
            this custom dimension specified.

            A value of 0 means that custom dimension is not considered.
          type: number
          format: double
          example: 0 
          default: 0
      required:
        - name
    FilterAttribute:
      type: object
      properties:
        name:
          description: The JSON path of the filter attribute in a document or document part metadata.
          type: string
        level:
          description: Indicates whether this a document or document part metadata filter.
          type: string
          enum:
            - "document"
            - "part"
        description:
          description: Description of the filter. May be omitted.
          type: string
        indexed:
          description: Whether an index is created for the filter. Creating an index will improve query latency when using the filter.
          type: boolean
          default: true
        type:
          description: The value type of the filter.
          type: string
          enum:
            - "integer"
            - "real_number"
            - "text"
            - "boolean"
            - "list[integer]"
            - "list[real_number]"
            - "list[text]"
      required:
        - name
        - level
        - type
    ListCorporaResponse:
      type: object
      properties:
        corpora:
          type: array
          items:
            $ref: '#/components/schemas/Corpus'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    SearchParameters:
      type: object
      description: Search parameters to retrieve knowledge for the query.
      properties:
        offset:
          description: Specifies how many results into the result to skip. This is useful for pagination.
          type: integer
          format: int32
          default: 0
        limit:
          description: The maximum number of results returned.
          type: integer
          format: int32
          minimum: 1
          default: 10
        context_configuration:
          $ref: '#/components/schemas/ContextConfiguration'
        reranker:
          $ref: '#/components/schemas/Reranker'
    ContextConfiguration:
      type: object
      description: Configuration on the presentation of each document part in the result set.
      properties:
        characters_before:
          description: |
            The number of characters before the matching document part that are shown.
            Mutually exclusive with `sentences_before`. This is useful to show the
            context of the document part in the wider document."
          type: integer
          format: int32
          default: 0
          minimum: 0
          example: 30
        characters_after:
          description: |
            The number of characters after the matching document part that are shown. 
            Mutually exclusive with `sentences_after`.
          type: integer
          format: int32
          default: 0
          minimum: 0
          example: 30
        sentences_before:
          description: |
            The number of sentences before the matching document part that are shown.
            Mutually exclusive with `characters_before`.
          type: integer
          format: int32
          default: 0
          minimum: 0
          example: 3
        sentences_after:
          description: |
            The number of sentences after the matching document part that are shown. 
            Mutually exclusive with `characters_after`.
          type: integer
          format: int32
          default: 0
          minimum: 0
          example: 3
        start_tag:
          description: |
            The tag that wraps the document part at the start. This is often used to 
            provide a start HTML/XML tag or some other delimiter you can use in an 
            application to understand where to provide highlighting in your UI and 
            understand where the context before ends and the document part begins.
          type: string
          example: '<b>'
        end_tag:
          description: |
            The tag that wraps the document part at the end. This is often used to 
            provide a start HTML/XML tag or some other delimiter you can use in an 
            application to understand where to provide highlighting in your UI and 
            understand where the context before ends and the document part begins.
          type: string
          example: '</b>'
    GenerationParameters:
      description: The parameters to control generation.
      type: object
      properties:
        model_id:
          description: The ID of the generator model to use.
          type: string
        prompt_id:
          description: The prompt to use to feed the query results and other context to the model.
          type: string
        max_used_search_results:
          description: The maximum number of search results to be available to the prompt.
          type: integer
          format: int32
          minimum: 0
          default: 5
        prompt_text:
          description: |
            Vectara manages both system and user roles and prompts for the generative
            LLM out of the box by default. However, Scale customers can override the
            prompt_text via this variable. The prompt_text is in the form of an
            Apache Velocity template. For more details on how to configure the
            prompt_text, see the long-form documentation at
            https://docs.vectara.com/docs/prompts/vectara-prompt-engine.
            See https://vectara.com/pricing/ for more details on becoming a Scale customer.
          type: string
        debug:
          description: |
            Debugging the generative prompt is currently a Scale-only feature.
            See https://vectara.com/pricing/ for more details on becoming a Scale customer.
          type: boolean
        response_characters:
          description: |
            Controls the length of the generated output.
            This is a rough estimate and not a hard limit: the end output can be longer or shorter
            than this value.  This is currently a Scale-only feature.
            See https://vectara.com/pricing/ for more details on becoming a Scale customer.
          type: integer
          format: int32
          example: 300
          minimum: 0
        response_language:
          description: The language of the generator response.
          type: string
          format: lang
          default: AUTO
        model_parameters:
          title: ModelParameters
          description: |
            The parameters for the model.  These are currently a Scale-only feature.
            See https://vectara.com/pricing/ for more details on becoming a Scale customer.
            WARNING: This is an experimental feature, and breakable at any point with virtually no
            notice. It is meant for experimentation to converge on optimal parameters that can then
            be set in the prompt definitions.
          type: object
          properties:
            max_tokens:
              description: The maximum number of tokens to be returned by the model.
              type: integer
              format: int32
              minimum: 0
            temperature:
              description: |
                The sampling temperature to use. Higher values make the output more random, while lower
                values make it more focused and deterministic.
              type: number
              format: float
            frequency_penalty:
              description: |
                Higher values penalize new tokens based on their existing frequency in the text so far,
                decreasing the model's likelihood to repeat the same line verbatim.
              type: number
              format: float
            presence_penalty:
              description: |
                Higher values penalize new tokens based on whether they appear in the text so far,
                increasing the model's likelihood to talk about new topics.
              type: number
              format: float
        enable_factual_consistency_score:
          description: Enable returning the factual consistency score with query results.
          type: boolean
          default: true
      required:
        - model_id
        - prompt_id
    QueryRequest:
      description: Query one or more corpora.
      type: object
      properties:
        query:
          description: The query to receive an answer on.
          type: string
        stream_response:
          description: Indicates whether the response should be streamed or not.
          type: boolean
          default: false
        search:
          $ref: '#/components/schemas/SearchCorporaParameters'
        summarization:
          $ref: '#/components/schemas/GenerationParameters'
      required:
        - query
        - search
    SearchCorporaParameters:
      description: The parameters to search one or more corpora.
      allOf:
        - $ref: '#/components/schemas/SearchParameters'
      type: object
      properties:
        corpora:
          description: The corpora that you want to search.
          type: array
          items:
            $ref: '#/components/schemas/KeyedSearchCorpus'
          minItems: 1
      required:
        - corpora
    QueryCorpusRequest:
      type: object
      properties:
        query:
          description: The query to receive an answer on.
          type: string
        stream_response:
          description: Indicates whether the response should be streamed or not.
          type: boolean
          default: false
        search:
          title: SearchCorpusParameters
          description: The parameters to search one corpus.
          allOf:
            - $ref: '#/components/schemas/SearchCorpus'
            - $ref: '#/components/schemas/SearchParameters'
        summarization:
          $ref: '#/components/schemas/GenerationParameters'
      required:
        - query
    SearchCorpus:
      type: object
      properties:
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
        metadata_filter:
          description: The filter string to narrow the search to according to metadata attributes.
          type: string
          example: 'doc.title = "Adventures of Huckleberry Finn"'
        lexical_interpolation:
          description: How much to weigh lexical scores compared to the embedding score. 0 means lexical search is not used at all, and 1 means only lexical search is used.
          type: number
          format: float
          minimum: 0
          maximum: 1
          example: .025
        semantics:
          $ref: '#/components/schemas/SearchSemantics'
    SearchSemantics:
      description: Indicates whether to consider a query against this corpus as a query or a response.
      type: string
      enum:
        - 'default'
        - 'query'
        - 'response'
      default: 'default'
    KeyedSearchCorpus:
      allOf:
        - $ref: '#/components/schemas/SearchCorpus'
        - type: object
          properties:
            corpus_key:
              description: Specifies the corpus on which to perform the search.
              type: string
              pattern: '[a-zA-Z0-9_\=]+$'
      required:
        - corpus_key
    Reranker:
      type: object
      description: Rerank results of the search.
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          customer_reranker: '#/components/schemas/CustomerSpecificReranker'
          mmr: '#/components/schemas/MMRReranker'
      oneOf:
        - $ref: '#/components/schemas/CustomerSpecificReranker'
        - $ref: '#/components/schemas/MMRReranker'
      required:
        - type
    CustomerSpecificReranker:
      description: Reranker that is specific to the customer.
      type: object
      allOf:
        - $ref: '#/components/schemas/Reranker'
      properties:
        reranker_id:
          description: |
            The id of the reranker. Current cross attentional reranker that may be used by
            Scale custmers is rnk_272725717.
          type: string
    MMRReranker:
      type: object
      allOf:
        - $ref: '#/components/schemas/Reranker'
      properties:
        diversity_bias:
          description: "The diversity bias. Higher values indicate more diversity."
          type: number
          format: float
          example: .3
    QueryFullResponse:
      description: The full response to a RAG query when the result is not streamed.
      type: object
      properties:
        summary:
          description: The summary of the search results.
          type: string
        summary_language:
          description: THe language that the summary is expected to be a part of.
          type: string
          example: ENG
        search_results:
          description: The ranked search results.
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
        factual_consistency_score:
          description: |
            The probability that the summary is factually consistent with the results.
          type: number
          format: float
    IndividualSearchResult:
      description: An individual ranked search result from a query.
      type: object
      properties:
        text:
          description: The document part altered by the context configuration that matches the query.
          type: string
        score:
          description: The score of the individual result.
          type: number
          format: double
        part_metadata:
          description: The metadata for the document part.
          type: object
          additionalProperties: true
        document_metadata:
          description: The metadata for the document that contains the document part.
          type: object
          additionalProperties: true
        document_id:
          description: The ID of the document that contains the document part.
          type: string
        request_corpora_index:
          description: |
            A query request can search over multiple corpora at a time. This proprety 
            is set to the index in the list of corpora in the original search request that this
            search result originated from.
            
            If the query request is only over one corpus, this property is 0.
          type: integer
          format: int32
          example: 0
          minimum: 0
    QueryStreamedResponse:
      description: An individual event sent with SSE when the query request is streamed. 
      type: object
      properties:
        type:
          description: The type of streamed response part that this chunk is.
          type: string
      discriminator:
        propertyName: type
        mapping:
          search_results: '#/components/schemas/QuerySearchResponse'
          summary_chunk: '#/components/schemas/QuerySummarizationChunk'
          factual_consistency_score: '#/components/schemas/FactualConsistencyScore'
          end: '#/components/schemas/QueryResponseEnd'
      oneOf:
        - $ref: '#/components/schemas/QuerySearchResponse'
        - $ref: '#/components/schemas/QuerySummarizationChunk'
        - $ref: '#/components/schemas/QueryResponseEnd'
        - $ref: '#/components/schemas/FactualConsistencyScore'
    QuerySearchResponse:
      description: The search response results.
      type: object
      allOf:
        - $ref: '#/components/schemas/QueryStreamedResponse'
      properties:
        search_results:
          description: The ranked search results.
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
    QuerySummarizationChunk:
      description: The chunk response from the summarization, possibly a partial summarization.
      type: object
      allOf:
        - $ref: '#/components/schemas/QueryStreamedResponse'
      properties:
        text_chunk:
          description: |
            Part of the message from the summarizer. All summary chunks must be appended together in order
            to get the full summary.
          type: string
    FactualConsistencyScore:
      description: Event containing the factual consistency score.
      type: object
      allOf:
        - $ref: '#/components/schemas/QueryStreamedResponse'
      properties:
        factual_consistency_score:
          description: The probability that the summary is factually consistent with the results.
          type: number
          format: float
    QueryResponseEnd:
      description: The end of a query response stream.
      type: object
      allOf:
        - $ref: '#/components/schemas/QueryStreamedResponse'
    UploadFileRequest:
      type: object
      properties:
        metadata:
          description: Arbitrary object that will be attached as document metadata to the extracted document.
          type: object
          additionalProperties: true
        file:
          type: string
          format: binary
    CreateDocumentRequest:
      description: |
        Creating a document using this endpoint can take multiple forms depending on how much
        control of the resulting document parts you desire. You can create a document
        with natural structure, and Vectara will use it's proprietary strategy to create document parts.

        Otherwise, you can create a document with all the document parts explicitly specified.

        A document part is the a search result item in search and retrieval augmeneted generation endpoints.
      type: object
      properties:
        id:
          description: The Document ID, must be unique within the corpus.
          type: string
        type:
          description: |
            Whether Vectara should employ its stategy to split up a structured document into parts, 
            or whether the document comes processed into document parts already. A document part 
            corresponds to a search result and will be scored by Vectara's retrieval engine. 

            A structured document is a document with layout features such as titles and sections.
            Vectara will split that structured document into document parts with an internal algorithim.

            A core document closely corresponds to Vectara's internal data structure, and there is a
            one-to-one mapping between core document parts and search results.
          type: string
      discriminator:
        propertyName: type
        mapping:
          core: '#/components/schemas/CoreDocument'
          structured: '#/components/schemas/StructuredDocument'
      oneOf:
        - $ref: '#/components/schemas/CoreDocument'
        - $ref: '#/components/schemas/StructuredDocument'
      required:
        - id
        - type
    StructuredDocument:
      description: A document with layout features.
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateDocumentRequest'
      properties:
        title:
          description: The title of the document.
          type: string
        description:
          description: The description of the document.
          type: string
        metadata:
          description: |
            The metadata for a document and is an arbitrary JSON object. Properties of this object
            can be used by document level filter attributes.
          type: object
          additionalProperties: true
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
        sections:
          description: The subsection of the document.
          type: array
          items:
            $ref: '#/components/schemas/StructuredDocumentSection'
    StructuredDocumentSection:
      description: A logical section within a structured document.
      type: object
      properties:
        id:
          description: The section ID. Gets converted to a metadata field.
          type: integer
          format: int32
        title:
          description: The section title.
          type: string
        text:
          description: The text of the section.
          type: string
        metadata:
          description: |
            Arbitrary object that becomes document part level metadata on any document part created 
            by this section. Properties of this object can be used by document part level 
            filters if defined as a corpus filter attribute.
          type: object
          properties: {}
          additionalProperties: true
        sections:
          description: The sections that this section contains.
          type: array
          items:
            $ref: '#/components/schemas/StructuredDocumentSection'
      required:
        - text
    CoreDocument:
      description: The document structure that most closely corresponds to Vectara's internal document data model.
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateDocumentRequest'
      properties:
        metadata:
          description: "Arbitrary object of document level metadata. Properties of this object \
                        can be used by document filter if defined as a corpus filter attribute."
          type: object
          properties: {}
          additionalProperties: true
        document_parts:
          description: Parts of the document that make up the document.
          type: array
          items:
            $ref: '#/components/schemas/CoreDocumentPart'
    CoreDocumentPart:
      description: A part of a document. This section gets converted into an embedding and directly maps to a search result. Usually a sentence.
      type: object
      properties:
        text:
          description: The text of the document part.
          type: string
        metadata:
          description: The metadata for a document part. Attributes matching corpus document part filter attributes are used as document part filter attributes.
          type: object
          additionalProperties: true
        context:
          description: The context text for the document part.
          type: string
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
      required:
        - text
    CustomDimensions:
      description: The custom dimensions as additional weights.
      type: object
      additionalProperties:
        type: number
        format: double
    Document:
      type: object
      properties:
        id:
          description: The Document ID.
          type: string
        metadata:
          description: The document metadata.
          type: object
          additionalProperties: true
        storage_usage:
          $ref: '#/components/schemas/DocumentStorageUsage'
    DocumentStorageUsage:
      type: object
      description: |
        How much storage the document used. This information is currently not returned when
        retrieving the document, and only returned when indexing document.
      properties:
        bytes_used:
          description: |
            Number of bytes used by document counting towards maximum corpus size, and
            towards any billing plans.
          type: integer
          format: int64
          minimum: 0
        metadata_bytes_used:
          description: |
            Number of metadata bytes used by document metadata.
          type: integer
          format: int64
          minimum: 0
    ListDocumentsResponse:
      type: object
      properties:
        documents:
          description: List of documents.
          type: array
          items:
            $ref: '#/components/schemas/Document'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    Summarizer:
      description: A summarizer is the LLM used to summarize query results.
      type: object
      properties:
        id:
          description: The ID of the summarizer. This is used as the model ID in a query.
          type: string
        description:
          description: The description of the summarizer.
          type: string
        enabled:
          description: Indicates whether the summarizer is enabled.
          type: boolean
        default:
          description: |
            If this is the default summarizer, it is used in queries when the summarizer
            is not specified.
          type: boolean
        prompts:
          $ref: '#/components/schemas/Prompt'
    Prompt:
      description: A prompt that can be used with an LLM.
      type: object
      properties:
        id:
          description: The ID of the prompt. This is used as the prompt id in a query.
          type: string
        description:
          description: The description of the prompt.
          type: string
        enabled:
          description: Indicates whether the prompt is enabled.
          type: boolean
        default:
          description: Indicates if this prompt is the default prompt used with the summarizer.
          type: boolean
    ListSummarizersResponse:
      type: object
      properties:
        summarizers:
          description: List of summarizers.
          type: array
          items:
            $ref: '#/components/schemas/Summarizer'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    ChatRequest:
      type: object
      properties:
        query:
          description: The chat message or question.
          type: string
        stream_response:
          description: Indicates whether the response should be streamed or not.
          type: boolean
          default: false
        search:
          $ref: '#/components/schemas/SearchCorporaParameters'
        generation:
          $ref: '#/components/schemas/GenerationParameters'
        store:
          description: Indicates whether to store request message and response message.
          type: boolean
          default: true
      required:
        - query
        - search
    ChatFullResponse:
      description: Full response to a chat question when the result is not streamed.
      type: object
      properties:
        chat_id:
          description: If the chat response was stored, the ID of the chat.
          type: string
        turn_id:
          description: If the chat response was stored, the ID of the turn.
          type: string
        answer:
          description: The message from the chat model for the chat message.
          type: string
        answer_language:
          description: The language that the message is expected to be.
          type: string
          example: ENG
        search_results:
          description: The ranked search results that the chat model used.
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
    ChatStreamedResponse:
      description: An individual event when the response is streamed.
      type: object
      properties:
        type:
          description: The type of streamed response part that this chunk is.
          type: string
      discriminator:
        propertyName: type
        mapping:
          search_results: '#/components/schemas/ChatSearchResponse'
          chat_info: '#/components/schemas/ChatInfoResponse'
          message_chunk: '#/components/schemas/ChatMessageChunk'
          factual_consistency_score: '#/components/schemas/ChatFactualConsistencyScore'
          end: '#/components/schemas/ChatResponseEnd'
      oneOf:
        - $ref: '#/components/schemas/ChatSearchResponse'
        - $ref: '#/components/schemas/ChatInfoResponse'
        - $ref: '#/components/schemas/ChatMessageChunk'
        - $ref: '#/components/schemas/ChatFactualConsistencyScore'
        - $ref: '#/components/schemas/ChatResponseEnd'
    ChatSearchResponse:
      description: The search response results.
      type: object
      allOf:
        - $ref: '#/components/schemas/ChatStreamedResponse'
      properties:
        search_results:
          description: The ranked search results.
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
    ChatInfoResponse:
      description: Information about the chat.
      type: object
      allOf:
        - $ref: '#/components/schemas/ChatStreamedResponse'
      properties:
        chat_id:
          description: ID of the chat.
          type: string
          pattern: 'cht_.+$'
        turn_id:
          description: ID of the turn.
          type: string
          pattern: 'trn_.+$'
    ChatMessageChunk:
      description: A chunk of the message sent from the generator.
      type: object
      allOf:
        - $ref: '#/components/schemas/ChatStreamedResponse'
      properties:
        text_chunk:
          description: |
            Part of the message from the model. All message chunks must be appended together in order
            to get the full message.
          type: string
    ChatFactualConsistencyScore:
      description: Event containing the factual consistency score.
      type: object
      allOf:
        - $ref: '#/components/schemas/ChatStreamedResponse'
      properties:
        factual_consistency_score:
          description: The probability that the summary is factually consistent with the results.
          type: number
          format: float
    ChatResponseEnd:
      description: The end of a chat response stream.
      type: object
      allOf:
        - $ref: '#/components/schemas/ChatStreamedResponse'
    Chat:
      type: object
      properties:
        id:
          description: ID of the chat.
          type: string
          pattern: 'cht_.+$'
        first_query:
          description: The first query of the chat.
          type: string
        first_answer:
          description: The first answer of the chat.
          type: string
        enabled:
          description: Indicates whether this chat is enabled and can have further turns.
          type: boolean
          example: true
        created_at:
          description: Specifies when this chat was created.
          type: string
          format: date-time
    ListChatsResponse:
      type: object
      properties:
        chats:
          description: List of chats.
          type: array
          items:
            $ref: '#/components/schemas/Chat'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    CreateTurnRequest:
      type: object
      properties:
        query:
          description: The initial question.
          type: string
      required:
        - query
    Turn:
      type: object
      properties:
        id:
          description: The ID of the turn.
          type: string
          pattern: 'trn_.+$'
        chat_id:
          description: The ID of the chat the turn resides in.
          type: string
          pattern: 'cht_.+$'
        query:
          description: The query made to produce this turn.
          type: string
        answer:
          description: The response to the query.
          type: string
        enabled:
          description: Indicates whether the turn is enabled and shown in futures turns of the chat.
          type: boolean
        created_at:
          description: Specifies when the turn was created.
          type: string
          format: date-time
    ListChatTurnsResponse:
      type: object
      properties:
        turns:
          description: List of turns.
          type: array
          items:
            $ref: '#/components/schemas/Turn'
    UpdateTurnRequest:
      type: object
      properties:
        enabled:
          description: |
            Indicates whether to disable a turn. It will disable this turn and all subsequent turns.
            Enabling a turn is not implemented.
          type: boolean
          example: false
    ListEncodersResponse:
      type: object
      properties:
        encoders:
          type: array
          items:
            $ref: '#/components/schemas/Encoder'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    CreateApiKeyRequest:
      type: object
      properties:
        name:
          description: The human-readable name of the API key.
          type: string
        api_roles:
          description: The API roles attached to the API key.
          type: array
          items:
            type: string
    ApiKey:
      type: object
      properties:
        id:
          description: The ID of the API key.
          type: string
          pattern: 'key_[a-zA-Z0-9_\=]+$'
        name:
          description: The human-readable name of the API key.
          type: string
        secret_key:
          description: The key used in API requests. Should be kept secure.
          type: string
        api_roles:
          description: The API roles attached to the API key.
          type: array
          items:
            type: string
    UpdateApiKeyRequest:
      type: object
      properties:
        enabled:
          description: Indicates whether to disable or enable an API key.
        api_roles:
          description: The new roles attached to the API key. These roles will replace the current roles.
          type: array
          items:
            type: string
    ListApiKeysResponse:
      type: object
      properties:
        api_keys:
          description: List of API keys.
          type: array
          items:
            $ref: '#/components/schemas/ApiKey'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    CreateAppClientRequest:
      type: object
      properties:
        name:
          description: The human-readable name of the App Client.
          type: string
        policy_ids:
          description: The API policies attached to the App Client.
          type: array
          items:
            type: string
    AppClient:
      type: object
      properties:
        id:
          description: ID of the App Client.
          type: string
          pattern: 'key_[a-zA-Z0-9_\=]+$'
        name:
          description: The human-readable name of the App Client.
          type: string
        secret_key:
          description: The key used in API requests. Should be kept secure.
          type: string
        api_roles:
          description: The API roles attached to the App Client.
          type: array
          items:
            type: string
    UpdateAppClientRequest:
      type: object
      properties:
        enabled:
          description: Indicates whether to disable or enable an App Client.
        api_roles:
          description: The new roles attached to the App Client. These roles will replace the current roles.
          type: array
          items:
            type: string
    ListAppClientsResponse:
      type: object
      properties:
        api_keys:
          description: List of App Clients.
          type: array
          items:
            $ref: '#/components/schemas/AppClient'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    Encoder:
      type: object
      properties:
        id:
          description: The Encoder ID.
          type: string
          pattern: 'enc_[0-9]+$'
          example: enc_1
        name:
          description: The encoder name.
          type: string
          example: boomerang
        output_dimensions:
          description: "When this encoder is used to create an embedding, it shows the count of dimensions for the output embedding.\
                        A high dimensionality will consume more storage space, but it allows for an increase the quality of\
                        the embedding."
          type: integer
          format: int32
          example: 768
        description:
          description: The encoder description.
          type: string
        default:
          description: Indicates whether the encoder is default used when creating a corpus.
          type: boolean
          example: true
        enabled:
          description: Indicates whether the encoder is enabled.
          type: boolean
          example: true
    Job:
      type: object
      properties:
        id:
          description: The ID of the job.
          type: string
          pattern: 'job_.+$'
        type:
          description: The type of job.
          type: string
          enum:
            - "rebuild_vector_index"
            - "replace_filter_attributes"
            - "unknown"
        corpus_keys:
          description: The corpora that this job belongs to. It may not belong to any corpora.
          type: array
          items:
            type: string
            pattern: '[a-zA-Z0-9_\=]+$'
        state:
          $ref: '#/components/schemas/JobState'
        created_at:
          description: Specifies when the job was created.
          type: string
          format: date-time
        started_at:
          description: Specifies when the job was started.
          type: string
          format: date-time
        completed_at:
          description: Specifies when the job was completed.
          type: string
          format: date-time
    JobState:
      type: string
      enum:
        - unknown
        - queued
        - started
        - completed
        - failed
        - failed_will_retry
        - aborted
    ListJobsResponse:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    CreateUserRequest:
      type: object
      properties:
        email:
          description: The email address for the user.
          type: string
          format: email
        username:
          description: The username for the user. The value defaults to the email.
          type: string
        description:
          description: The description for the user.
          type: string
        api_roles:
          description: The role names assigned to the user.
          type: array
          items:
            type: string
      required:
        - email
    UpdateUserRequest:
      type: object
      properties:
        enabled:
          description: Indicates whether to disable or disable the user.
          type: boolean
        api_roles:
          description: The new role names of the user.
          type: array
          items:
            type: string
    User:
      type: object
      properties:
        id:
          description: The Vectara ID for the user.
          type: string
          pattern: 'usr_.+'
        email:
          description: The email address for the user.
          type: string
          format: email
        username:
          description: The username for the user.
          type: string
        enabled:
          description: Indicates whether the user is enabled or disabled.
          type: boolean
        description:
          description: The escription for the user.
          type: string
        api_roles:
          description: The role names of the user.
          type: array
          items:
            type: string
            pattern: 'rol_.+'
    ListUsersResponse:
      type: object
      properties:
        users:
          description: List of users.
          type: array
          items:
            $ref: '#/components/schemas/User'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    ApiRole:
      type: object
      properties:
        name:
          description: The name of the API role.
          type: string
        allowed_operations:
          description: |
            Operations that are allowed by the API role. Each operation may only allow
            certain resources that are described by a resource path to resource value
            map. If the value is null, then the operation is allowed on any resource.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ApiOperationPolicy'
      required:
        - name
        - allowed_operations
    ApiOperationPolicy:
      description: |
        Policy to allow operations if only using the specified resource.
      type: object
      properties:
        allow_any_resource:
          description: If any resource is allowed for the operation.
          type: boolean
          default: true
        allowed_resources:
          description: |
            Object with keys of resource paths to a list of allowed resources.
            A resource path starts with either body, path, or implicit.
            A body or path resource is within the operation body, and implicit
            resource is a resource implied by the request.
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - allow_any_resource
    ListApiRolesResponse:
      type: object
      properties:
        api_roles:
          description: List of roles.
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
        metadata:
          $ref: '#/components/schemas/ListMetadata' 
    ListMetadata:
      type: object
      description: The standard metadata in the response of a list operation.
      properties:
        page_key:
          description: When requesting the next page of this list, this is needed as a query parameter.
          type: string
    NotFoundError:
      type: object
      properties:
        id:
          description: The ID cannot found.
          type: string
        messages:
          type: array
          items:
            title: message
            type: string
        request_id:
          description: ID of the request that can be used to help Vectara support debug what went wrong.
          type: string
    BadRequestError:
      type: object
      properties:
        field_errors:
          description: The errors that relate to specific fields in the request.
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            title: message
            type: string
        request_id:
          description: The ID of the request that can be used to help Vectara support debug what went wrong.
          type: string
    Error:
      type: object
      properties:
        messages:
          description: The messages describing why the error occured.
          type: array
          items:
            title: message
            type: string
            example: "Internal server error."
        request_id:
          description: The ID of the request that can be used to help Vectara support debug what went wrong .
          type: string
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
security:
  - ApiKeyAuth
